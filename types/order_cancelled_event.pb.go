// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: order_cancelled_event.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderCancelledEvent struct {
	ID       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Version  int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	TicketID int64 `protobuf:"varint,3,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
}

func (m *OrderCancelledEvent) Reset()         { *m = OrderCancelledEvent{} }
func (m *OrderCancelledEvent) String() string { return proto.CompactTextString(m) }
func (*OrderCancelledEvent) ProtoMessage()    {}
func (*OrderCancelledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_41a0857e9d5a0957, []int{0}
}
func (m *OrderCancelledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderCancelledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderCancelledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderCancelledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderCancelledEvent.Merge(m, src)
}
func (m *OrderCancelledEvent) XXX_Size() int {
	return m.Size()
}
func (m *OrderCancelledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderCancelledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_OrderCancelledEvent proto.InternalMessageInfo

func (m *OrderCancelledEvent) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OrderCancelledEvent) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderCancelledEvent) GetTicketID() int64 {
	if m != nil {
		return m.TicketID
	}
	return 0
}

func init() {
	proto.RegisterType((*OrderCancelledEvent)(nil), "types.OrderCancelledEvent")
}

func init() { proto.RegisterFile("order_cancelled_event.proto", fileDescriptor_41a0857e9d5a0957) }

var fileDescriptor_41a0857e9d5a0957 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xce, 0x2f, 0x4a, 0x49,
	0x2d, 0x8a, 0x4f, 0x4e, 0xcc, 0x4b, 0x4e, 0xcd, 0xc9, 0x49, 0x4d, 0x89, 0x4f, 0x2d, 0x4b, 0xcd,
	0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0xd2,
	0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7,
	0x07, 0xcb, 0x26, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1, 0xa5, 0x54, 0xc4, 0x25,
	0xec, 0x0f, 0x32, 0xd4, 0x19, 0x66, 0xa6, 0x2b, 0xc8, 0x48, 0x21, 0x31, 0x2e, 0xa6, 0xcc, 0x14,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0x66, 0x27, 0xb6, 0x47, 0xf7, 0xe4, 0x99, 0x3c, 0x5d, 0x82, 0x98,
	0x32, 0x53, 0x84, 0x24, 0xb8, 0xd8, 0xcb, 0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x24, 0x98, 0x40,
	0x92, 0x41, 0x30, 0xae, 0x90, 0x26, 0x17, 0x67, 0x49, 0x66, 0x72, 0x76, 0x6a, 0x49, 0x7c, 0x66,
	0x8a, 0x04, 0x33, 0x58, 0x23, 0xcf, 0xa3, 0x7b, 0xf2, 0x1c, 0x21, 0x60, 0x41, 0x4f, 0x97, 0x20,
	0x0e, 0x88, 0xb4, 0x67, 0x8a, 0x93, 0xc4, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e,
	0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31,
	0x24, 0xb1, 0x81, 0x1d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x81, 0xa9, 0x4b, 0x8d, 0xe9,
	0x00, 0x00, 0x00,
}

func (m *OrderCancelledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderCancelledEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderCancelledEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TicketID != 0 {
		i = encodeVarintOrderCancelledEvent(dAtA, i, uint64(m.TicketID))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintOrderCancelledEvent(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintOrderCancelledEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrderCancelledEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrderCancelledEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderCancelledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovOrderCancelledEvent(uint64(m.ID))
	}
	if m.Version != 0 {
		n += 1 + sovOrderCancelledEvent(uint64(m.Version))
	}
	if m.TicketID != 0 {
		n += 1 + sovOrderCancelledEvent(uint64(m.TicketID))
	}
	return n
}

func sovOrderCancelledEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrderCancelledEvent(x uint64) (n int) {
	return sovOrderCancelledEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderCancelledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderCancelledEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderCancelledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderCancelledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderCancelledEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderCancelledEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketID", wireType)
			}
			m.TicketID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderCancelledEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderCancelledEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderCancelledEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderCancelledEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderCancelledEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderCancelledEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderCancelledEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrderCancelledEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrderCancelledEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrderCancelledEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrderCancelledEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderCancelledEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrderCancelledEvent = fmt.Errorf("proto: unexpected end of group")
)

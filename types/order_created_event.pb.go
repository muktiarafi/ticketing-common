// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: order_created_event.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderCreatedEvent struct {
	ID          int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status      string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Version     int64   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	UserID      int64   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExpiresAt   string  `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	TicketID    int64   `protobuf:"varint,6,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	TicketPrice float64 `protobuf:"fixed64,7,opt,name=ticket_price,json=ticketPrice,proto3" json:"ticket_price,omitempty"`
}

func (m *OrderCreatedEvent) Reset()         { *m = OrderCreatedEvent{} }
func (m *OrderCreatedEvent) String() string { return proto.CompactTextString(m) }
func (*OrderCreatedEvent) ProtoMessage()    {}
func (*OrderCreatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f5e62704a79222, []int{0}
}
func (m *OrderCreatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderCreatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderCreatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderCreatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderCreatedEvent.Merge(m, src)
}
func (m *OrderCreatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *OrderCreatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderCreatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_OrderCreatedEvent proto.InternalMessageInfo

func (m *OrderCreatedEvent) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OrderCreatedEvent) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *OrderCreatedEvent) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderCreatedEvent) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *OrderCreatedEvent) GetExpiresAt() string {
	if m != nil {
		return m.ExpiresAt
	}
	return ""
}

func (m *OrderCreatedEvent) GetTicketID() int64 {
	if m != nil {
		return m.TicketID
	}
	return 0
}

func (m *OrderCreatedEvent) GetTicketPrice() float64 {
	if m != nil {
		return m.TicketPrice
	}
	return 0
}

func init() {
	proto.RegisterType((*OrderCreatedEvent)(nil), "types.OrderCreatedEvent")
}

func init() { proto.RegisterFile("order_created_event.proto", fileDescriptor_04f5e62704a79222) }

var fileDescriptor_04f5e62704a79222 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0xb1, 0x4e, 0x02, 0x31,
	0x1c, 0xc6, 0xe9, 0x21, 0x05, 0x2a, 0x8b, 0x1d, 0x48, 0x35, 0xb1, 0xa0, 0x2e, 0x38, 0x08, 0x83,
	0x4f, 0x20, 0xe2, 0x70, 0x93, 0xa6, 0xd1, 0xf9, 0x02, 0xd7, 0xbf, 0xd8, 0x18, 0xe9, 0xa5, 0xed,
	0x11, 0x7d, 0x0b, 0x1f, 0xcb, 0x91, 0xd1, 0x89, 0x98, 0xde, 0x03, 0xf8, 0x0a, 0xa6, 0xbd, 0x73,
	0xeb, 0xf7, 0xfb, 0xfa, 0xfd, 0x86, 0x3f, 0x39, 0xd6, 0x46, 0x82, 0xc9, 0x72, 0x03, 0x4b, 0x07,
	0x32, 0x83, 0x2d, 0x6c, 0xdc, 0xb4, 0x30, 0xda, 0x69, 0xda, 0x71, 0x1f, 0x05, 0xd8, 0x93, 0xab,
	0xb5, 0x72, 0x2f, 0xe5, 0x6a, 0x9a, 0xeb, 0xb7, 0xd9, 0x5a, 0xaf, 0xf5, 0x2c, 0xb6, 0xab, 0xf2,
	0x39, 0xa6, 0x18, 0xe2, 0xab, 0x5e, 0x9d, 0xff, 0x22, 0x72, 0x74, 0x1f, 0x9c, 0xb7, 0xb5, 0xf2,
	0x2e, 0x18, 0xe9, 0x90, 0x24, 0x4a, 0x32, 0x34, 0x46, 0x93, 0xf6, 0x1c, 0xfb, 0xfd, 0x28, 0x49,
	0x17, 0x22, 0x51, 0x92, 0x0e, 0x09, 0xb6, 0x6e, 0xe9, 0x4a, 0xcb, 0x92, 0x31, 0x9a, 0xf4, 0x45,
	0x93, 0x28, 0x23, 0xdd, 0x2d, 0x18, 0xab, 0xf4, 0x86, 0xb5, 0xc3, 0x48, 0xfc, 0x47, 0x7a, 0x41,
	0xba, 0xa5, 0x05, 0x93, 0x29, 0xc9, 0x0e, 0xa2, 0x8e, 0xf8, 0xfd, 0x08, 0x3f, 0x59, 0x30, 0xe9,
	0x42, 0xe0, 0x50, 0xa5, 0x92, 0x9e, 0x12, 0x02, 0xef, 0x85, 0x32, 0x60, 0xb3, 0xa5, 0x63, 0x9d,
	0xa8, 0xee, 0x37, 0xe4, 0xc6, 0xd1, 0x4b, 0xd2, 0x77, 0x2a, 0x7f, 0x05, 0x17, 0x2c, 0x38, 0x5a,
	0x06, 0x7e, 0x3f, 0xea, 0x3d, 0x46, 0x98, 0x2e, 0x44, 0xaf, 0xae, 0x53, 0x49, 0xcf, 0xc8, 0xa0,
	0xf9, 0x5a, 0x18, 0x95, 0x03, 0xeb, 0x8e, 0xd1, 0x04, 0x89, 0xc3, 0x9a, 0x3d, 0x04, 0x34, 0x67,
	0x5f, 0x9e, 0xa3, 0x9d, 0xe7, 0xe8, 0xc7, 0x73, 0xf4, 0x59, 0xf1, 0xd6, 0xae, 0xe2, 0xad, 0xef,
	0x8a, 0xb7, 0x56, 0x38, 0x9e, 0xe4, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x44, 0xfc, 0x45,
	0x65, 0x01, 0x00, 0x00,
}

func (m *OrderCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderCreatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TicketPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TicketPrice))))
		i--
		dAtA[i] = 0x39
	}
	if m.TicketID != 0 {
		i = encodeVarintOrderCreatedEvent(dAtA, i, uint64(m.TicketID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ExpiresAt) > 0 {
		i -= len(m.ExpiresAt)
		copy(dAtA[i:], m.ExpiresAt)
		i = encodeVarintOrderCreatedEvent(dAtA, i, uint64(len(m.ExpiresAt)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UserID != 0 {
		i = encodeVarintOrderCreatedEvent(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x20
	}
	if m.Version != 0 {
		i = encodeVarintOrderCreatedEvent(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOrderCreatedEvent(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintOrderCreatedEvent(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrderCreatedEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrderCreatedEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderCreatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovOrderCreatedEvent(uint64(m.ID))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOrderCreatedEvent(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovOrderCreatedEvent(uint64(m.Version))
	}
	if m.UserID != 0 {
		n += 1 + sovOrderCreatedEvent(uint64(m.UserID))
	}
	l = len(m.ExpiresAt)
	if l > 0 {
		n += 1 + l + sovOrderCreatedEvent(uint64(l))
	}
	if m.TicketID != 0 {
		n += 1 + sovOrderCreatedEvent(uint64(m.TicketID))
	}
	if m.TicketPrice != 0 {
		n += 9
	}
	return n
}

func sovOrderCreatedEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrderCreatedEvent(x uint64) (n int) {
	return sovOrderCreatedEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderCreatedEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderCreatedEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderCreatedEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderCreatedEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderCreatedEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderCreatedEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderCreatedEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderCreatedEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderCreatedEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderCreatedEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiresAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketID", wireType)
			}
			m.TicketID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderCreatedEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TicketPrice = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOrderCreatedEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderCreatedEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderCreatedEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderCreatedEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderCreatedEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderCreatedEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrderCreatedEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrderCreatedEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrderCreatedEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrderCreatedEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderCreatedEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrderCreatedEvent = fmt.Errorf("proto: unexpected end of group")
)
